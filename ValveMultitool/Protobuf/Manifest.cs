// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/manifest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Protobuf/manifest.proto</summary>
public static partial class ManifestReflection {

  #region Descriptor
  /// <summary>File descriptor for Protobuf/manifest.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ManifestReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChdQcm90b2J1Zi9tYW5pZmVzdC5wcm90byKuAgoHUGF5bG9hZBImCghtYXBw",
          "aW5ncxgBIAMoCzIULlBheWxvYWQuRmlsZU1hcHBpbmca+gEKC0ZpbGVNYXBw",
          "aW5nEhAKCGZpbGVuYW1lGAEgASgJEgwKBHNpemUYAiABKAQSDQoFZmxhZ3MY",
          "AyABKA0SFAoMc2hhX2ZpbGVuYW1lGAQgASgMEhMKC3NoYV9jb250ZW50GAUg",
          "ASgMEi4KBmNodW5rcxgGIAMoCzIeLlBheWxvYWQuRmlsZU1hcHBpbmcuQ2h1",
          "bmtEYXRhGmEKCUNodW5rRGF0YRILCgNzaGEYASABKAwSCwoDY3JjGAIgASgH",
          "Eg4KBm9mZnNldBgDIAEoBBITCgtjYl9vcmlnaW5hbBgEIAEoDRIVCg1jYl9j",
          "b21wcmVzc2VkGAUgASgNIt0BCghNZXRhZGF0YRIQCghkZXBvdF9pZBgBIAEo",
          "DRIUCgxnaWRfbWFuaWZlc3QYAiABKAQSFQoNY3JlYXRpb25fdGltZRgDIAEo",
          "DRIbChNmaWxlbmFtZXNfZW5jcnlwdGVkGAQgASgIEhgKEGNiX2Rpc2tfb3Jp",
          "Z2luYWwYBSABKAQSGgoSY2JfZGlza19jb21wcmVzc2VkGAYgASgEEhUKDXVu",
          "aXF1ZV9jaHVua3MYByABKA0SFQoNY3JjX2VuY3J5cHRlZBgIIAEoDRIRCglj",
          "cmNfY2xlYXIYCSABKA0iHgoJU2lnbmF0dXJlEhEKCXNpZ25hdHVyZRgBIAEo",
          "DGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Payload), global::Payload.Parser, new[]{ "Mappings" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Payload.Types.FileMapping), global::Payload.Types.FileMapping.Parser, new[]{ "Filename", "Size", "Flags", "ShaFilename", "ShaContent", "Chunks" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Payload.Types.FileMapping.Types.ChunkData), global::Payload.Types.FileMapping.Types.ChunkData.Parser, new[]{ "Sha", "Crc", "Offset", "CbOriginal", "CbCompressed" }, null, null, null)})}),
          new pbr::GeneratedClrTypeInfo(typeof(global::Metadata), global::Metadata.Parser, new[]{ "DepotId", "GidManifest", "CreationTime", "FilenamesEncrypted", "CbDiskOriginal", "CbDiskCompressed", "UniqueChunks", "CrcEncrypted", "CrcClear" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Signature), global::Signature.Parser, new[]{ "Signature_" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Payload : pb::IMessage<Payload> {
  private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Payload> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ManifestReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Payload() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Payload(Payload other) : this() {
    mappings_ = other.mappings_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Payload Clone() {
    return new Payload(this);
  }

  /// <summary>Field number for the "mappings" field.</summary>
  public const int MappingsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Payload.Types.FileMapping> _repeated_mappings_codec
      = pb::FieldCodec.ForMessage(10, global::Payload.Types.FileMapping.Parser);
  private readonly pbc::RepeatedField<global::Payload.Types.FileMapping> mappings_ = new pbc::RepeatedField<global::Payload.Types.FileMapping>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Payload.Types.FileMapping> Mappings {
    get { return mappings_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Payload);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Payload other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!mappings_.Equals(other.mappings_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= mappings_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    mappings_.WriteTo(output, _repeated_mappings_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += mappings_.CalculateSize(_repeated_mappings_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Payload other) {
    if (other == null) {
      return;
    }
    mappings_.Add(other.mappings_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          mappings_.AddEntriesFrom(input, _repeated_mappings_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Payload message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class FileMapping : pb::IMessage<FileMapping> {
      private static readonly pb::MessageParser<FileMapping> _parser = new pb::MessageParser<FileMapping>(() => new FileMapping());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<FileMapping> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::Payload.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public FileMapping() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public FileMapping(FileMapping other) : this() {
        filename_ = other.filename_;
        size_ = other.size_;
        flags_ = other.flags_;
        shaFilename_ = other.shaFilename_;
        shaContent_ = other.shaContent_;
        chunks_ = other.chunks_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public FileMapping Clone() {
        return new FileMapping(this);
      }

      /// <summary>Field number for the "filename" field.</summary>
      public const int FilenameFieldNumber = 1;
      private string filename_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Filename {
        get { return filename_; }
        set {
          filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "size" field.</summary>
      public const int SizeFieldNumber = 2;
      private ulong size_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ulong Size {
        get { return size_; }
        set {
          size_ = value;
        }
      }

      /// <summary>Field number for the "flags" field.</summary>
      public const int FlagsFieldNumber = 3;
      private uint flags_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint Flags {
        get { return flags_; }
        set {
          flags_ = value;
        }
      }

      /// <summary>Field number for the "sha_filename" field.</summary>
      public const int ShaFilenameFieldNumber = 4;
      private pb::ByteString shaFilename_ = pb::ByteString.Empty;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString ShaFilename {
        get { return shaFilename_; }
        set {
          shaFilename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "sha_content" field.</summary>
      public const int ShaContentFieldNumber = 5;
      private pb::ByteString shaContent_ = pb::ByteString.Empty;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString ShaContent {
        get { return shaContent_; }
        set {
          shaContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "chunks" field.</summary>
      public const int ChunksFieldNumber = 6;
      private static readonly pb::FieldCodec<global::Payload.Types.FileMapping.Types.ChunkData> _repeated_chunks_codec
          = pb::FieldCodec.ForMessage(50, global::Payload.Types.FileMapping.Types.ChunkData.Parser);
      private readonly pbc::RepeatedField<global::Payload.Types.FileMapping.Types.ChunkData> chunks_ = new pbc::RepeatedField<global::Payload.Types.FileMapping.Types.ChunkData>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::Payload.Types.FileMapping.Types.ChunkData> Chunks {
        get { return chunks_; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as FileMapping);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(FileMapping other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Filename != other.Filename) return false;
        if (Size != other.Size) return false;
        if (Flags != other.Flags) return false;
        if (ShaFilename != other.ShaFilename) return false;
        if (ShaContent != other.ShaContent) return false;
        if(!chunks_.Equals(other.chunks_)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Filename.Length != 0) hash ^= Filename.GetHashCode();
        if (Size != 0UL) hash ^= Size.GetHashCode();
        if (Flags != 0) hash ^= Flags.GetHashCode();
        if (ShaFilename.Length != 0) hash ^= ShaFilename.GetHashCode();
        if (ShaContent.Length != 0) hash ^= ShaContent.GetHashCode();
        hash ^= chunks_.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Filename.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Filename);
        }
        if (Size != 0UL) {
          output.WriteRawTag(16);
          output.WriteUInt64(Size);
        }
        if (Flags != 0) {
          output.WriteRawTag(24);
          output.WriteUInt32(Flags);
        }
        if (ShaFilename.Length != 0) {
          output.WriteRawTag(34);
          output.WriteBytes(ShaFilename);
        }
        if (ShaContent.Length != 0) {
          output.WriteRawTag(42);
          output.WriteBytes(ShaContent);
        }
        chunks_.WriteTo(output, _repeated_chunks_codec);
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Filename.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
        }
        if (Size != 0UL) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Size);
        }
        if (Flags != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
        }
        if (ShaFilename.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(ShaFilename);
        }
        if (ShaContent.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(ShaContent);
        }
        size += chunks_.CalculateSize(_repeated_chunks_codec);
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(FileMapping other) {
        if (other == null) {
          return;
        }
        if (other.Filename.Length != 0) {
          Filename = other.Filename;
        }
        if (other.Size != 0UL) {
          Size = other.Size;
        }
        if (other.Flags != 0) {
          Flags = other.Flags;
        }
        if (other.ShaFilename.Length != 0) {
          ShaFilename = other.ShaFilename;
        }
        if (other.ShaContent.Length != 0) {
          ShaContent = other.ShaContent;
        }
        chunks_.Add(other.chunks_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Filename = input.ReadString();
              break;
            }
            case 16: {
              Size = input.ReadUInt64();
              break;
            }
            case 24: {
              Flags = input.ReadUInt32();
              break;
            }
            case 34: {
              ShaFilename = input.ReadBytes();
              break;
            }
            case 42: {
              ShaContent = input.ReadBytes();
              break;
            }
            case 50: {
              chunks_.AddEntriesFrom(input, _repeated_chunks_codec);
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the FileMapping message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static partial class Types {
        public sealed partial class ChunkData : pb::IMessage<ChunkData> {
          private static readonly pb::MessageParser<ChunkData> _parser = new pb::MessageParser<ChunkData>(() => new ChunkData());
          private pb::UnknownFieldSet _unknownFields;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<ChunkData> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::Payload.Types.FileMapping.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ChunkData() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ChunkData(ChunkData other) : this() {
            sha_ = other.sha_;
            crc_ = other.crc_;
            offset_ = other.offset_;
            cbOriginal_ = other.cbOriginal_;
            cbCompressed_ = other.cbCompressed_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ChunkData Clone() {
            return new ChunkData(this);
          }

          /// <summary>Field number for the "sha" field.</summary>
          public const int ShaFieldNumber = 1;
          private pb::ByteString sha_ = pb::ByteString.Empty;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pb::ByteString Sha {
            get { return sha_; }
            set {
              sha_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "crc" field.</summary>
          public const int CrcFieldNumber = 2;
          private uint crc_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public uint Crc {
            get { return crc_; }
            set {
              crc_ = value;
            }
          }

          /// <summary>Field number for the "offset" field.</summary>
          public const int OffsetFieldNumber = 3;
          private ulong offset_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ulong Offset {
            get { return offset_; }
            set {
              offset_ = value;
            }
          }

          /// <summary>Field number for the "cb_original" field.</summary>
          public const int CbOriginalFieldNumber = 4;
          private uint cbOriginal_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public uint CbOriginal {
            get { return cbOriginal_; }
            set {
              cbOriginal_ = value;
            }
          }

          /// <summary>Field number for the "cb_compressed" field.</summary>
          public const int CbCompressedFieldNumber = 5;
          private uint cbCompressed_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public uint CbCompressed {
            get { return cbCompressed_; }
            set {
              cbCompressed_ = value;
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as ChunkData);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(ChunkData other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Sha != other.Sha) return false;
            if (Crc != other.Crc) return false;
            if (Offset != other.Offset) return false;
            if (CbOriginal != other.CbOriginal) return false;
            if (CbCompressed != other.CbCompressed) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (Sha.Length != 0) hash ^= Sha.GetHashCode();
            if (Crc != 0) hash ^= Crc.GetHashCode();
            if (Offset != 0UL) hash ^= Offset.GetHashCode();
            if (CbOriginal != 0) hash ^= CbOriginal.GetHashCode();
            if (CbCompressed != 0) hash ^= CbCompressed.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (Sha.Length != 0) {
              output.WriteRawTag(10);
              output.WriteBytes(Sha);
            }
            if (Crc != 0) {
              output.WriteRawTag(21);
              output.WriteFixed32(Crc);
            }
            if (Offset != 0UL) {
              output.WriteRawTag(24);
              output.WriteUInt64(Offset);
            }
            if (CbOriginal != 0) {
              output.WriteRawTag(32);
              output.WriteUInt32(CbOriginal);
            }
            if (CbCompressed != 0) {
              output.WriteRawTag(40);
              output.WriteUInt32(CbCompressed);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (Sha.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeBytesSize(Sha);
            }
            if (Crc != 0) {
              size += 1 + 4;
            }
            if (Offset != 0UL) {
              size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Offset);
            }
            if (CbOriginal != 0) {
              size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CbOriginal);
            }
            if (CbCompressed != 0) {
              size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CbCompressed);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(ChunkData other) {
            if (other == null) {
              return;
            }
            if (other.Sha.Length != 0) {
              Sha = other.Sha;
            }
            if (other.Crc != 0) {
              Crc = other.Crc;
            }
            if (other.Offset != 0UL) {
              Offset = other.Offset;
            }
            if (other.CbOriginal != 0) {
              CbOriginal = other.CbOriginal;
            }
            if (other.CbCompressed != 0) {
              CbCompressed = other.CbCompressed;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  Sha = input.ReadBytes();
                  break;
                }
                case 21: {
                  Crc = input.ReadFixed32();
                  break;
                }
                case 24: {
                  Offset = input.ReadUInt64();
                  break;
                }
                case 32: {
                  CbOriginal = input.ReadUInt32();
                  break;
                }
                case 40: {
                  CbCompressed = input.ReadUInt32();
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

  }
  #endregion

}

public sealed partial class Metadata : pb::IMessage<Metadata> {
  private static readonly pb::MessageParser<Metadata> _parser = new pb::MessageParser<Metadata>(() => new Metadata());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Metadata> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ManifestReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Metadata() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Metadata(Metadata other) : this() {
    depotId_ = other.depotId_;
    gidManifest_ = other.gidManifest_;
    creationTime_ = other.creationTime_;
    filenamesEncrypted_ = other.filenamesEncrypted_;
    cbDiskOriginal_ = other.cbDiskOriginal_;
    cbDiskCompressed_ = other.cbDiskCompressed_;
    uniqueChunks_ = other.uniqueChunks_;
    crcEncrypted_ = other.crcEncrypted_;
    crcClear_ = other.crcClear_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Metadata Clone() {
    return new Metadata(this);
  }

  /// <summary>Field number for the "depot_id" field.</summary>
  public const int DepotIdFieldNumber = 1;
  private uint depotId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DepotId {
    get { return depotId_; }
    set {
      depotId_ = value;
    }
  }

  /// <summary>Field number for the "gid_manifest" field.</summary>
  public const int GidManifestFieldNumber = 2;
  private ulong gidManifest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong GidManifest {
    get { return gidManifest_; }
    set {
      gidManifest_ = value;
    }
  }

  /// <summary>Field number for the "creation_time" field.</summary>
  public const int CreationTimeFieldNumber = 3;
  private uint creationTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CreationTime {
    get { return creationTime_; }
    set {
      creationTime_ = value;
    }
  }

  /// <summary>Field number for the "filenames_encrypted" field.</summary>
  public const int FilenamesEncryptedFieldNumber = 4;
  private bool filenamesEncrypted_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool FilenamesEncrypted {
    get { return filenamesEncrypted_; }
    set {
      filenamesEncrypted_ = value;
    }
  }

  /// <summary>Field number for the "cb_disk_original" field.</summary>
  public const int CbDiskOriginalFieldNumber = 5;
  private ulong cbDiskOriginal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong CbDiskOriginal {
    get { return cbDiskOriginal_; }
    set {
      cbDiskOriginal_ = value;
    }
  }

  /// <summary>Field number for the "cb_disk_compressed" field.</summary>
  public const int CbDiskCompressedFieldNumber = 6;
  private ulong cbDiskCompressed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong CbDiskCompressed {
    get { return cbDiskCompressed_; }
    set {
      cbDiskCompressed_ = value;
    }
  }

  /// <summary>Field number for the "unique_chunks" field.</summary>
  public const int UniqueChunksFieldNumber = 7;
  private uint uniqueChunks_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UniqueChunks {
    get { return uniqueChunks_; }
    set {
      uniqueChunks_ = value;
    }
  }

  /// <summary>Field number for the "crc_encrypted" field.</summary>
  public const int CrcEncryptedFieldNumber = 8;
  private uint crcEncrypted_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CrcEncrypted {
    get { return crcEncrypted_; }
    set {
      crcEncrypted_ = value;
    }
  }

  /// <summary>Field number for the "crc_clear" field.</summary>
  public const int CrcClearFieldNumber = 9;
  private uint crcClear_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CrcClear {
    get { return crcClear_; }
    set {
      crcClear_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Metadata);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Metadata other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DepotId != other.DepotId) return false;
    if (GidManifest != other.GidManifest) return false;
    if (CreationTime != other.CreationTime) return false;
    if (FilenamesEncrypted != other.FilenamesEncrypted) return false;
    if (CbDiskOriginal != other.CbDiskOriginal) return false;
    if (CbDiskCompressed != other.CbDiskCompressed) return false;
    if (UniqueChunks != other.UniqueChunks) return false;
    if (CrcEncrypted != other.CrcEncrypted) return false;
    if (CrcClear != other.CrcClear) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DepotId != 0) hash ^= DepotId.GetHashCode();
    if (GidManifest != 0UL) hash ^= GidManifest.GetHashCode();
    if (CreationTime != 0) hash ^= CreationTime.GetHashCode();
    if (FilenamesEncrypted != false) hash ^= FilenamesEncrypted.GetHashCode();
    if (CbDiskOriginal != 0UL) hash ^= CbDiskOriginal.GetHashCode();
    if (CbDiskCompressed != 0UL) hash ^= CbDiskCompressed.GetHashCode();
    if (UniqueChunks != 0) hash ^= UniqueChunks.GetHashCode();
    if (CrcEncrypted != 0) hash ^= CrcEncrypted.GetHashCode();
    if (CrcClear != 0) hash ^= CrcClear.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DepotId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(DepotId);
    }
    if (GidManifest != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(GidManifest);
    }
    if (CreationTime != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(CreationTime);
    }
    if (FilenamesEncrypted != false) {
      output.WriteRawTag(32);
      output.WriteBool(FilenamesEncrypted);
    }
    if (CbDiskOriginal != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(CbDiskOriginal);
    }
    if (CbDiskCompressed != 0UL) {
      output.WriteRawTag(48);
      output.WriteUInt64(CbDiskCompressed);
    }
    if (UniqueChunks != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(UniqueChunks);
    }
    if (CrcEncrypted != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(CrcEncrypted);
    }
    if (CrcClear != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(CrcClear);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DepotId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DepotId);
    }
    if (GidManifest != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GidManifest);
    }
    if (CreationTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreationTime);
    }
    if (FilenamesEncrypted != false) {
      size += 1 + 1;
    }
    if (CbDiskOriginal != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CbDiskOriginal);
    }
    if (CbDiskCompressed != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CbDiskCompressed);
    }
    if (UniqueChunks != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UniqueChunks);
    }
    if (CrcEncrypted != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CrcEncrypted);
    }
    if (CrcClear != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CrcClear);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Metadata other) {
    if (other == null) {
      return;
    }
    if (other.DepotId != 0) {
      DepotId = other.DepotId;
    }
    if (other.GidManifest != 0UL) {
      GidManifest = other.GidManifest;
    }
    if (other.CreationTime != 0) {
      CreationTime = other.CreationTime;
    }
    if (other.FilenamesEncrypted != false) {
      FilenamesEncrypted = other.FilenamesEncrypted;
    }
    if (other.CbDiskOriginal != 0UL) {
      CbDiskOriginal = other.CbDiskOriginal;
    }
    if (other.CbDiskCompressed != 0UL) {
      CbDiskCompressed = other.CbDiskCompressed;
    }
    if (other.UniqueChunks != 0) {
      UniqueChunks = other.UniqueChunks;
    }
    if (other.CrcEncrypted != 0) {
      CrcEncrypted = other.CrcEncrypted;
    }
    if (other.CrcClear != 0) {
      CrcClear = other.CrcClear;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DepotId = input.ReadUInt32();
          break;
        }
        case 16: {
          GidManifest = input.ReadUInt64();
          break;
        }
        case 24: {
          CreationTime = input.ReadUInt32();
          break;
        }
        case 32: {
          FilenamesEncrypted = input.ReadBool();
          break;
        }
        case 40: {
          CbDiskOriginal = input.ReadUInt64();
          break;
        }
        case 48: {
          CbDiskCompressed = input.ReadUInt64();
          break;
        }
        case 56: {
          UniqueChunks = input.ReadUInt32();
          break;
        }
        case 64: {
          CrcEncrypted = input.ReadUInt32();
          break;
        }
        case 72: {
          CrcClear = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Signature : pb::IMessage<Signature> {
  private static readonly pb::MessageParser<Signature> _parser = new pb::MessageParser<Signature>(() => new Signature());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Signature> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ManifestReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Signature() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Signature(Signature other) : this() {
    signature_ = other.signature_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Signature Clone() {
    return new Signature(this);
  }

  /// <summary>Field number for the "signature" field.</summary>
  public const int Signature_FieldNumber = 1;
  private pb::ByteString signature_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Signature_ {
    get { return signature_; }
    set {
      signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Signature);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Signature other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Signature_ != other.Signature_) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Signature_.Length != 0) hash ^= Signature_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Signature_.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Signature_);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Signature_.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature_);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Signature other) {
    if (other == null) {
      return;
    }
    if (other.Signature_.Length != 0) {
      Signature_ = other.Signature_;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Signature_ = input.ReadBytes();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
